#include<stdio.h>
#include<math.h>

double arr[1000001][2];
/*
struct list_cycle{
    double x;
    double y;
    struct list_cycle *next;
};
struct cycle{
    struct list_cycle *max;
    struct list_cycle *min;
    struct list_cycle *start;
};
double dis(double x1,double y1,double x2,double y2){
    return sqrt(pow(x1-x2,2)+pow(y1-y2,2));
}
void print_cy(struct cycle *cy){
    struct list_cycle *start,*ind;
    start=cy->start;
    ind=start;
    while(1){
        printf("(%lf,%lf)\n",ind->x,ind->y);
        ind=ind->next;
        if(ind==start)break;
    }
}
void swap(int a,int b){
    int tmp;
    tmp=arr[a][1];
    arr[a][1]=arr[b][1];
    arr[b][1]=tmp;
            
    tmp=arr[a][0];
    arr[a][0]=arr[b][0];
    arr[b][0]=tmp;
}
struct cycle* divide(int start,int end){
    int i,j;
    double tmp;
    int mid = (start+end)/2;
    struct list_cycle *new,*ind;
    struct cycle *cy,*tmp1,*tmp2;
    cy=(struct cycle*)malloc(sizeof(struct cycle));
    if(end-1<=start){
        new=(struct list_cycle*)malloc(sizeof(struct list_cycle));
        ind=new;
        ind->x=arr[start][0];
        ind->y=arr[start][1];
        ind->next=ind;
        cy->start=ind;
        cy->max=ind;
        cy->min=ind;
        //printf("%d (%lf,%lf)\n",start,ind->x,ind->y);
    }else{
        tmp1=divide(start,mid);
        tmp2=divide(mid,end);
        tmp1->min->next = tmp2->min;
        tmp2->max->next = tmp1->max;        
        cy->start=tmp1->start;
        
        
        if(tmp1->max->y > tmp2->max->y){
            cy->max = tmp1->max;
        }else if(tmp1->max->y==tmp2->max->y && tmp1->max->x > tmp2->max->x)
            cy->max = tmp1->max;
        else if(tmp1->max->x != tmp2->max->x)cy->max = tmp2->max;
        else cy->max = tmp1->max;
        
        if(tmp1->min->y < tmp2->min->y ){
            cy->min = tmp1->min;
        }else if(tmp1->min->y == tmp2->min->y && tmp1->min->x < tmp2->min->x)
            cy->min = tmp1->min;
        else if(tmp1->min->x != tmp2->min->x)cy->min = tmp2->min;
        else if(cy->max!=tmp1->min)cy->min = tmp1->min;
        else cy->min=tmp2->min;
        printf("------------%d-------------\n",mid);
        printf("---(%lf,%lf) (%lf,%lf)---\n",cy->max->x,cy->max->y,cy->min->x,cy->min->y);
        print_cy(cy);
    }
    return cy;
}*/
struct list_point{
    double x;
    double y;
    struct list_point *next;
};
int cmp(const void *a,const void *b){
    double *aa = (double**)a;
    double *bb= (double**)b;
    if(aa[1]>bb[1])return 1;
    else if(aa[1]<bb[1])return -1;
    else if(aa[1]==bb[1] && aa[0]<bb[0])return -1;
    else if(aa[1]==bb[1] && aa[0]>bb[0])return  1;
    return 0;
}
struct list_point* copy(int i){
    struct list_point* new=(struct list_point*)malloc(sizeof(struct list_point));
    new->x=arr[i][0];
    new->y=arr[i][1];
    return new;
}
struct list_point* convex(int n){
    struct list_point *tmp=NULL,*start,*new,*index;
    int i;
    new=copy(0);
    start=index=new;
    for(i=1;i<n;i++){
        //printf("---%lf %lf\n",arr[i][0],arr[i][1]);
        if(index->y < arr[i][1]){
            if(index->x > arr[i][0]){
                if(tmp==NULL){
                    tmp=index;
                    new=copy(i);
                    index->next = new;
                    index=new;
                }else if(tmp->x <= arr[i][0]){
                    new=copy(i);
                    tmp->next = new;
                    tmp=NULL;
                    index=new;
                }else{
                    new=copy(i);
                    index->next = new; 
                    index=new;
                }
            }else {
                new=copy(i);
                if(tmp!=NULL){
                    if(tmp->x <= arr[i][0]){
                        tmp->next=new;
                        tmp=NULL;
                        index=new;
                    }else{
                        index->next = new;
                        index=new;
                    }
                }else{
                    index->next = new;
                    index=new;
                }
            }
        }else{
            if(index->x > arr[i][0]){
                new=copy(i);
                if(tmp!=NULL && arr[i][0] >= tmp->x){
                    tmp->next=new;
                    tmp=NULL;
                }else if(tmp==NULL){
                    index->next = new;
                }
            }
        }
        //printf("%lf %lf\n",index->x,index->y);
    }
    return start;
}
int main(){
    int n,t,i,j;
    double max,tmp;
    double x1,x2,y1,y2;
    struct list_point *start,*index,*index2;
    scanf("%d",&t);
    for(j=0;j<t;j++){
        max=0;
        scanf("%d",&n);
        for(i=0;i<n;i++){
            scanf("%lf%lf",&arr[i][0],&arr[i][1]);
            //printf("%lf %lf\n",arr[i][0],arr[i][1]);
        }
        qsort(arr,n,sizeof(double)*2,cmp);
        start=convex(n);
        index=start;
        while(index!=NULL){
            index2=index->next;
            while(index2!=NULL){
                tmp=dis(index->x,index->y,index2->x,index2->y);
                if(tmp>max){
                    max=tmp;
                    x1=index->x;
                    x2=index2->x;
                    y1=index->y;
                    y2=index2->y;
                }index2=index2->next;
            }
            //printf("(%lf,%lf)\n",index->x,index->y);
            index=index->next;
        }
        
        /*printf("------------------------\n");
        for(i=0;i<n;i++){
            //scanf("%lf%lf",&arr[i][0],&arr[i][1]);
            printf("%lf %lf\n",arr[i][0],arr[i][1]);
        }*/
        /*cy=divide(0,n);
        printf("------------end-------------\n");
        start=cy->start;
        ind=start;
        while(1){
            printf("(%lf,%lf)\n",ind->x,ind->y);
            ind=ind->next;
            if(ind==start)break;
        }*/
        printf("(%lf,%lf)(%lf,%lf)\nLongest dis = %lf\n",x1,y1,x2,y2,max);
    }
    return 0;
}